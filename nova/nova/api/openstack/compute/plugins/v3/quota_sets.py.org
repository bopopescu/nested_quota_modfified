# Copyright 2011 OpenStack Foundation
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

import six.moves.urllib.parse as urlparse
import webob
import httplib
#import nova.openstack.common.jsonutils
import sys
import json
from nova.api.openstack.compute.schemas.v3 import quota_sets
from nova.api.openstack import extensions
from nova.api.openstack import wsgi
from nova.api import validation
import nova.context
from nova import exception
from nova.i18n import _
from nova import objects
from nova.openstack.common import log as logging
from nova.openstack.common import strutils
from nova import quota
from keystoneclient.middleware import auth_token
from nova import db
KEYSTONE_CONF=auth_token.CONF

ALIAS = "os-quota-sets"
QUOTAS = quota.QUOTAS
LOG = logging.getLogger(__name__)
authorize_root_update = extensions.extension_authorizer('compute',
                                                   'v3:%s:root:update' % ALIAS)
authorize_update = extensions.extension_authorizer('compute',
                                                   'v3:%s:update' % ALIAS)
authorize_show = extensions.extension_authorizer('compute',
                                                 'v3:%s:show' % ALIAS)
authorize_root_delete = extensions.extension_authorizer('compute',
                                                   'v3:%s:root:delete' % ALIAS)
authorize_delete = extensions.extension_authorizer('compute',
                                                   'v3:%s:delete' % ALIAS)
authorize_detail = extensions.extension_authorizer('compute',
                                                   'v3:%s:detail' % ALIAS)


class QuotaSetsController(wsgi.Controller):

    def _format_quota_set(self, project_id, quota_set):
        """Convert the quota object to a result dict."""
        quota_set.update(id=str(project_id))
        return dict(quota_set=quota_set)

    def _validate_quota_limit(self, resource, limit, minimum, maximum):
        # NOTE: -1 is a flag value for unlimited
        if ((limit < minimum) and
           (maximum != -1 or (maximum == -1 and limit != -1))):
            msg = (_("Quota limit %(limit)s for %(resource)s must "
                     "be greater than or equal to already used and "
                     "reserved %(minimum)s.") %
                   {'limit': limit, 'resource': resource, 'minimum': minimum})
            raise webob.exc.HTTPBadRequest(explanation=msg)
        if maximum != -1 and limit > maximum:
            msg = (_("Quota limit %(limit)s for %(resource)s must be "
                     "less than or equal to %(maximum)s.") %
                   {'limit': limit, 'resource': resource, 'maximum': maximum})
            raise webob.exc.HTTPBadRequest(explanation=msg)

    def _get_quotas(self, context, id, user_id=None, usages=False):
        if user_id:
            values = QUOTAS.get_user_quotas(context, id, user_id,
                                            usages=usages)
        else:
            values = QUOTAS.get_project_quotas(context, id, usages=usages)

        if usages:
            return values
        else:
            return dict((k, v['limit']) for k, v in values.items())

    @extensions.expected_errors(403)
    def show(self, req, id):
        context = req.environ['nova.context']
        authorize_show(context)
        params = urlparse.parse_qs(req.environ.get('QUERY_STRING', ''))
        user_id = params.get('user_id', [None])[0]
        try:
            nova.context.authorize_project_context(context, id)
            return self._format_quota_set(id,
                    self._get_quotas(context, id, user_id=user_id))
        except exception.Forbidden:
            raise webob.exc.HTTPForbidden()

    @extensions.expected_errors(403)
    def detail(self, req, id):
        context = req.environ['nova.context']
        authorize_detail(context)
        user_id = req.GET.get('user_id', None)
        try:
            nova.context.authorize_project_context(context, id)
            return self._format_quota_set(id, self._get_quotas(context, id,
                                                               user_id=user_id,
                                                               usages=True))
        except exception.Forbidden:
            raise webob.exc.HTTPForbidden()

    """@extensions.expected_errors((400, 403))
    @validation.schema(quota_sets.update)
    def update(self, req, id, body):
        context = req.environ['nova.context']
        authorize_update(context)
        project_id = id
        params = urlparse.parse_qs(req.environ.get('QUERY_STRING', ''))
        user_id = params.get('user_id', [None])[0]

        quota_set = body['quota_set']
        force_update = strutils.bool_from_string(quota_set.get('force',
                                                               'False'))

        try:
            settable_quotas = QUOTAS.get_settable_quotas(context, project_id,
                                                         user_id=user_id)
        except exception.Forbidden:
            raise webob.exc.HTTPForbidden()

        LOG.debug("Force update quotas: %s", force_update)

        for key, value in body['quota_set'].iteritems():
            if key == 'force' or (not value and value != 0):
                continue
            # validate whether already used and reserved exceeds the new
            # quota, this check will be ignored if admin want to force
            # update
            value = int(value)
            if not force_update:
                minimum = settable_quotas[key]['minimum']
                maximum = settable_quotas[key]['maximum']
                self._validate_quota_limit(key, value, minimum, maximum)

            try:
                objects.Quotas.create_limit(context, project_id,
                                            key, value, user_id=user_id)
            except exception.QuotaExists:
                objects.Quotas.update_limit(context, project_id,
                                            key, value, user_id=user_id)
            except exception.AdminRequired:
                raise webob.exc.HTTPForbidden()
        return self._format_quota_set(id, self._get_quotas(context, id,
                                                           user_id=user_id))"""
    @extensions.expected_errors((400, 403))
    @validation.schema(quota_sets.update)
    def update(self, req, id, body):
        context = req.environ['nova.context']
        #authorize_update(context)
        project_id = id
        ################
        child_list=[]
        #parent_id="c0ef42e3da1f4169af5eb33543aaa438"
        f= open('/opt/stack/devstack/output.file','a+')
        f.write("\n going to write in the output file ")
        parent_id=None
        if hasattr(context, 'auth_token') and hasattr(context, 'project_id'):
            if(context.auth_token and context.project_id):

                token=context.auth_token
                headers = {"X-Auth-Token": token,
                           "Content-type": "application/json",
                           "Accept": "text/json"}
                params={}

                auth_host = KEYSTONE_CONF.keystone_authtoken.auth_host
                auth_port = int(KEYSTONE_CONF.keystone_authtoken.auth_port)
                auth_server = '%s:%s' % (auth_host,auth_port)
                auth_url='/%s/%s/%s' % ("v3","projects",project_id)
                #f= open('/opt/stack/devstack/output.file','a+')
                f.write("\n")
                f.write(auth_url)
                f.write("\n")
                f.write(auth_server)
                f.write("\n")
                f.write(token)
                            
                conn = httplib.HTTPConnection(auth_server)
                #conn = httplib.HTTPConnection("127.0.0.1:35357")
                f.write("\nconnection made to the keystone\n")
                #auth_url='/%s/%s/%s' % ("v3","projects",project_id)
                #f= open('/opt/output.file','w')
                # f.write(auth_url)
                #auth_url="/v3/projects/9db53c66f25649f88594b12ab6fed1b0"
                conn.request("GET", auth_url, json.dumps(params), headers=headers)
                response = conn.getresponse()
                data = response.read()
                f.write(data)
                f.write("\n data written \n")
                #import json
                data1='{"name":"sajeesh"}'
                data1=json.loads(data1)
                f.write(data1["name"])
                data=json.loads(data)
                #f.write(data)
                if not "project" in data:
                     #raise exception.Forbidden()
                     f.write("\n the keystone o/p is not having project attribute")
                     raise webob.exc.HTTPForbidden()

                try:
                    parent_id= data["project"]["parent_id"]
                    f.write("***************")
                    f.write(parent_id)
                    f.write("*******")
                except:
                    f.write("exception occurrde")
                    pass
                #parent_id="c0ef42e3da1f4169af5eb33543aaa438"
                #parent_id="c0ef42e3da1f4169af5eb33543aaa438"
                
                target={"project_id":parent_id}
                
                if parent_id:
                    auth_url='/%s/%s/%s?%s' % ("v3","projects",parent_id,"subtree")
                else:
                    auth_url='/%s/%s/%s?%s' % ("v3","projects",project_id,"subtree")
                #parent_id="c0ef42e3da1f4169af5eb33543aaa438"
              
                if parent_id:
                    #authorize_update(context,target=target)
                    target={"project_id":parent_id}
                    nova.context.authorize_parent_context(context,parent_id)
                    f.write("\n going to authorize quota update")
                    #f.write("\n context is %s" % context.project_id)
                    authorize_update(context,target=target)
                    
                    f.write("\n quota authorize successful")
                    nova.context.authorize_parent_context(context,parent_id)
                    f.write("\n authorize parent over !!!!!!!!!!!!")
                    #nova.context.authorize_project_context(context,project_id)
                else:
                    authorize_root_update(context)
                    #authorize_parent_context(context,parent_id)
                f.write("\n auth url \n")
                f.write(auth_url)
                conn.request("GET", auth_url, json.dumps(params), headers=headers)
                f.write("connection made for getting subtree")
                response = conn.getresponse()
                data = response.read()
                f.write("\n response data rrrrrrrrrrrrrrrrrrrr \n")
                f.write(data)
                data=json.loads(data)
                f.write("\n json conversion successful\n")
                f.write(json.dumps(data))
                subtree=[]
                try:
                    subtree=data["project"]["subtree"]
                    f.write("\n subtree \n")
                    f.write(json.dumps(subtree))
                except:
                    f.write("Exception occured while finding the subtree")
                    pass
                for item in subtree:
                    project_info=item["project"]
                    f.write("\n project info \n")
                    f.write(json.dumps(project_info))
                    try:
                        if project_info["parent_id"]==parent_id:
                           child_list.append(project_info["id"])
                           f.write("%s\n" % project_info["id"])
                    except:
                        f.write("exception occured while finding the child list")
                        pass
                #f.write(child_list)
        if parent_id is not None:
            if id not in child_list:
                raise exception.InvalidParent(parent_id=parent_id,project_id=project_id)


        f.write("\n communicationb with keystone over ")
        ################
        params = urlparse.parse_qs(req.environ.get('QUERY_STRING', ''))
        user_id = params.get('user_id', [None])[0]

        quota_set = body['quota_set']
        force_update = strutils.bool_from_string(quota_set.get('force',
                                                               'False'))

        try:
            f.write("\n trying to find settable quotas \n")
            f.write(project_id)
            f.write("\n")
            if parent_id:
                f.write(parent_id)
            f.write("\n I am here")
            settable_quotas = QUOTAS.get_settable_quotas(context, project_id,
                                                         parent_id,user_id=user_id)
            f.write("\n settable quotas found")
        except exception.Forbidden:
            raise webob.exc.HTTPForbidden()

        LOG.debug("Force update quotas: %s", force_update)

        for key, value in body['quota_set'].iteritems():
            if key == 'force' or (not value and value != 0):
                continue
            # validate whether already used and reserved exceeds the new
            # quota, this check will be ignored if admin want to force
            # update
            value = int(value)
            if not force_update:
                minimum = settable_quotas[key]['minimum']
                maximum = settable_quotas[key]['maximum']
                f.write("\n maximun %s minimum %s "%(maximum,minimum))
                self._validate_quota_limit(key, value, minimum, maximum)
            
            f.write("\n quota limit update")
            """is_root=False
            if parent_id is not None:
                f.write(" \n Not a root project")
                is_root=True"""
            try:
                objects.Quotas.create_limit(context, project_id,
                                      key, value,user_id=user_id)
            except exception.QuotaExists:
                objects.Quotas.update_limit(context, project_id,
                                      key, value, user_id=user_id)
            except exception.AdminRequired:
                raise webob.exc.HTTPForbidden()
            f.write("\n outside allocated quota update")
            if parent_id:
                f.write("\ngoing to update allocated quota")
                #f.close()
                db.quota_allocated_update(context, parent_id,child_list)
                f.write("\n after quota allocated update\n")
                #objects.Quotas.update_allocated_quota(context, parent_id,child_list)
            else:
                db.quota_allocated_update(context,project_id,child_list)
                #objects.Quotas.update_allocated_quota(context, project_id,child_list)
        return self._format_quota_set(id, self._get_quotas(context, id,
                                                           user_id=user_id))

    @extensions.expected_errors(())
    def defaults(self, req, id):
        context = req.environ['nova.context']
        authorize_show(context)
        values = QUOTAS.get_defaults(context)
        return self._format_quota_set(id, values)

    # TODO(oomichi): Here should be 204(No Content) instead of 202 by v2.1
    # +microversions because the resource quota-set has been deleted completely
    # when returning a response.
    """@extensions.expected_errors(403)
    @wsgi.response(202)
    def delete(self, req, id):
        context = req.environ['nova.context']
        authorize_delete(context)
        params = urlparse.parse_qs(req.environ.get('QUERY_STRING', ''))
        user_id = params.get('user_id', [None])[0]
        try:
            nova.context.authorize_project_context(context, id)
            if user_id:
                QUOTAS.destroy_all_by_project_and_user(context,
                                                       id, user_id)
            else:
                QUOTAS.destroy_all_by_project(context, id)
        except exception.Forbidden:
            raise webob.exc.HTTPForbidden()"""
    
    """@extensions.expected_errors(403)
    @wsgi.response(202)
    
    def delete(self, req, id):
        f=open("/opt/stack/devstack/delete.file",'a+')
        f.write("inside delete")
        context = req.environ['nova.context']
        authorize_delete(context)
        params = urlparse.parse_qs(req.environ.get('QUERY_STRING', ''))
        user_id = params.get('user_id', [None])[0]
        f.write("\n before assigned to body\n")
        body='{"quota_set":{"instances":"0"},\
                              :{"cores":"0"}, \
                              :{"floating_ips":"0"}, \
                              :{"fixed_ips":"0"}, \
                              :{"metadata_items":"0"}, \
                              :{"injected_files":"0"}, \
                              :{"injected_file_content_bytes":"0"}, \
                              :{"injected_file_path_bytes":"0"}, \
                              :{"quota_security_groups":"0"}, \
                              :{"quota_security_group_rules":"0"}, \
                              :{"quota_key_pairs":"0"}, \
                              :{"reservation_expire":"0"}, \
                              :{"quota_key_pairs":"0"}, \
    
        f.write("\n after assigning to body")
        try:
            f.write("\n going to authorise project context")
            nova.context.authorize_project_context(context, id)
            f.write("\nauthorise project context over") 
            if user_id:
                f.write("\n user id not null")
                QUOTAS.destroy_all_by_project_and_user(context,
                                                       id, user_id)
            else:
                f.write("\n")
                f.write("before delete update")
                f.write("\n before trial")
                try:
                    self._trial()
                except AttributeError:
                    f.write("\n method not existing")
                except ValueError:
                    f.write("\n value error")
                except KeyError:
                    f.write("\n key error")
                except NameError:
                    f.write("\n name error")
                except TypeError:
                    f.write("\n type error")


                f.write("\n after trial")
                self._delete_project_quota(req,id,body)
        except exception.Forbidden:
            raise webob.exc.HTTPForbidden()"""
    
    def _trial(self):
        f1= open('/opt/stack/devstack/trial.file','a+')
        f1.write("\n going to write in the quota trial  file ")
  
    def _delete_project_quota(self, req, id,body):
        f= open('/opt/stack/devstack/qdelete.file','a+')
        f.write("\n going to write in the quota delete file ")
        context = req.environ['nova.context']
        authorize_update(context)
        project_id = id
        ################
        child_list=[]
        #parent_id="c0ef42e3da1f4169af5eb33543aaa438"
        #f= open('/opt/stack/devstack/qdelete.file','a+')
        #f.write("\n going to write in the quota delete file ")
        parent_id=None
        if hasattr(context, 'auth_token') and hasattr(context, 'project_id'):
            if(context.auth_token and context.project_id):

                token=context.auth_token
                headers = {"X-Auth-Token": token,
                           "Content-type": "application/json",
                           "Accept": "text/json"}
                params={}

                auth_host = KEYSTONE_CONF.keystone_authtoken.auth_host
                auth_port = int(KEYSTONE_CONF.keystone_authtoken.auth_port)
                auth_server = '%s:%s' % (auth_host,auth_port)
                auth_url='/%s/%s/%s' % ("v3","projects",project_id)
                #f= open('/opt/stack/devstack/output.file','a+')
                f.write("\n")
                f.write(auth_url)
                f.write("\n")
                f.write(auth_server)
                f.write("\n")
                f.write(token)

                conn = httplib.HTTPConnection(auth_server)
                #conn = httplib.HTTPConnection("127.0.0.1:35357")
                f.write("\nconnection made to the keystone\n")
                #auth_url='/%s/%s/%s' % ("v3","projects",project_id)
                #f= open('/opt/output.file','w')
                # f.write(auth_url)
                #auth_url="/v3/projects/9db53c66f25649f88594b12ab6fed1b0"
                conn.request("GET", auth_url, json.dumps(params), headers=headers)
                response = conn.getresponse()
                data = response.read()
                f.write(data)
                f.write("\n data written \n")
                #import json
                data1='{"name":"sajeesh"}'
                data1=json.loads(data1)
                f.write(data1["name"])
                data=json.loads(data)
                #f.write(data)
                try:
                    parent_id= data["project"]["parent_id"]
                    f.write("***************")
                    f.write(parent_id)
                    f.write("*******")
                except:
                    f.write("exception occurrde")
                    pass
                #parent_id="c0ef42e3da1f4169af5eb33543aaa438"
                #parent_id="c0ef42e3da1f4169af5eb33543aaa438"

                if parent_id:
                    auth_url='/%s/%s/%s?%s' % ("v3","projects",parent_id,"subtree")
                else:
                    auth_url='/%s/%s/%s?%s' % ("v3","projects",project_id,"subtree")
                #parent_id="c0ef42e3da1f4169af5eb33543aaa438"
                if parent_id:
                    authorize_update(context)
                else:
                    authorize_update(context)
                f.write("\n auth url \n")
                f.write(auth_url)
                conn.request("GET", auth_url, json.dumps(params), headers=headers)
                f.write("connection made for getting subtree")
                response = conn.getresponse()
                data = response.read()
                f.write("\n response data rrrrrrrrrrrrrrrrrrrr \n")
                f.write(data)
                data=json.loads(data)
                f.write("\n json conversion successful\n")
                f.write(json.dumps(data))
                subtree=[]
                try:
                    subtree=data["project"]["subtree"]
                    f.write("\n subtree \n")
                    f.write(json.dumps(subtree))
                except:
                    f.write("Exception occured while finding the subtree")
                    pass
                for item in subtree:
                    project_info=item["project"]
                    f.write("\n project info \n")
                    f.write(json.dumps(project_info))
                    try:
                        if project_info["parent_id"]==parent_id:
                           child_list.append(project_info["id"])
                           f.write("%s\n" % project_info["id"])
                    except:
                        f.write("exception occured while finding the child list")
                        pass
                #f.write(child_list)
        if parent_id is not None:
            if id not in child_list:
                raise exception.InvalidParent(parent_id=parent_id,project_id=project_id)


        f.write("\n communicationb with keystone over ")
        ################
        params = urlparse.parse_qs(req.environ.get('QUERY_STRING', ''))
        user_id = params.get('user_id', [None])[0]

        quota_set = body['quota_set']
        force_update = strutils.bool_from_string(quota_set.get('force',
                                                               'False'))

        try:
            f.write("\n trying to find settable quotas \n")
            f.write(project_id)
            f.write("\n")
            if parent_id:
                f.write(parent_id)
            f.write("\n I am here")
            settable_quotas = QUOTAS.get_settable_quotas(context, project_id,
                                                         parent_id,user_id=user_id)
            f.write("\n settable quotas found")
        except exception.Forbidden:
            raise webob.exc.HTTPForbidden()

        LOG.debug("Force update quotas: %s", force_update)
        p=body['quota_set']
        f.write("\n going to print quota set")
        f.write("quota set %s" % p)
        f.write("\n quota set printed \n")
        f.write("\n settable quotas %s"%settable_quotas)
        for key, value in body['quota_set'].iteritems():
            if key == 'force' or (not value and value != 0):
                continue
            # validate whether already used and reserved exceeds the new
            # quota, this check will be ignored if admin want to force
            # update
            value = int(value)
            if not force_update:
                minimum = settable_quotas[key]['minimum']
                maximum = settable_quotas[key]['maximum']
                #f.write("\n key : %s" % key)
                f.write("\nkey :")
                f.write(key)
                #f.write("\n maximun %s minimum %s "% (maximum,minimum))
                f.write("\n maximun %s minimum %s "%(maximum,minimum))
                self._validate_quota_limit(key, value, minimum, maximum)

            f.write("\n quota limit update")
            try:
                objects.Quotas.create_limit(context, project_id,
                                            key, value, user_id=user_id)
            except exception.QuotaExists:
                objects.Quotas.update_limit(context, project_id,
                                            key, value, user_id=user_id)
            except exception.AdminRequired:
                raise webob.exc.HTTPForbidden()
            f.write("\n outside allocated quota update")
            if parent_id:
                f.write("\ngoing to update allocated quota")
                #f.close()
                #f.close()
                db.quota_allocated_update(context, parent_id,child_list)
                f.write("\n after quota allocated update\n")
                #objects.Quotas.update_allocated_quota(context, parent_id,child_list)
            else:
                f.write("root project doesn't  require to update allocated quota")
                #db.quota_allocated_update(context,project_id,child_list)
                #objects.Quotas.update_allocated_quota(context, project_id,child_list)
        f.write("\n quota delete successful")
        #return self._format_quota_set(id, self._get_quotas(context, id,
        #                                                   user_id=user_id))
    
    @extensions.expected_errors(403)
    @wsgi.response(202)

    def delete(self, req, id):
        f=open("/opt/stack/devstack/delete.file",'a+')
        f.write("inside delete")
        context = req.environ['nova.context']
        authorize_delete(context)
        params = urlparse.parse_qs(req.environ.get('QUERY_STRING', ''))
        user_id = params.get('user_id', [None])[0]
        f.write("\n before assigned to body\n")
        body={"quota_set":{"instances":"0",
                              "cores":"0",
                              "ram":"0", 
                              "floating_ips":"0", 
                              "fixed_ips":"0", 
                              "metadata_items":"0", 
                              "injected_files":"0", 
                              "injected_file_content_bytes":"0",
                              "injected_file_path_bytes":"0", 
                              "security_groups":"0", 
                              "security_group_rules":"0", 
                              "server_groups":"0",
                              "server_group_members":"0",
                              "key_pairs":"0" }}
        f.write("\n after assigning to body")
        try:
            f.write("\n going to authorise project context")
            nova.context.authorize_project_context(context, id)
            f.write("\nauthorise project context over")
            if user_id:
                f.write("\n user id not null")
                QUOTAS.destroy_all_by_project_and_user(context,
                                                       id, user_id)
            else:
                f.write("\n")
                f.write("before delete update")
                f.write("\n before trial")
                try:
                    self._trial()
                except AttributeError:
                    f.write("\n method not existing")
                except ValueError:
                    f.write("\n value error")
                except KeyError:
                    f.write("\n key error")
                except NameError:
                    f.write("\n name error")
                except TypeError:
                    f.write("\n type error")


                f.write("\n after trial")
                self._delete_project_quota(req,id,body)
                return self._format_quota_set(id, self._get_quotas(context, id,
                                                           user_id=user_id))
        except exception.Forbidden:
            raise webob.exc.HTTPForbidden()

class QuotaSets(extensions.V3APIExtensionBase):
    """Quotas management support."""

    name = "Quotas"
    alias = ALIAS
    version = 1

    def get_resources(self):
        resources = []

        res = extensions.ResourceExtension(ALIAS,
                                            QuotaSetsController(),
                                            member_actions={'defaults': 'GET',
                                                            'detail': 'GET'})
        resources.append(res)

        return resources

    def get_controller_extensions(self):
        return []
